//vector<int>& en C++ es una referencia constante a un vector de enteros.
//Esto significa que la referencia en sí es constante, por lo que no se puede modificar el vector al que hace referencia.
//Sin embargo, los elementos del vector pueden ser modificados si no son constantes. fuente

//Restricciones de const vector<int>& No se puede usar const vector<int>& para crear un nuevo vector de enteros.
//También hay que tener en cuenta que no se puede modificar el tamaño del vector al que hace referencia la referencia constante.


//¿Cuándo usar const vector<int>&? Se debe usar const vector<int>& cuando se necesita pasar un vector a una función o método sin que la función o método pueda modificar el vector. Esto ayuda a mejorar la seguridad y la legibilidad del código


//*https://www.reddit.com/r/cpp_questions/comments/f1r2v8/vectorintconst_iterator_vs_const_vectorintiterator/?rdt=64724

#include <iostream>
#include <vector>

using namespace std;

void lanDados(vector<int>& dados) {
    //función para lanzar los dados y almacenar los resultados en el vector 'dados'
}

int calPunt(const vector<int>& dados) {
    // calcular la puntuación basada en los resultados de los dados
    return 0;
}

void imprDados(const vector<int>& dados) {
    //imprimir los resultados de los dados
}

int main() {
vector<int> dados(6);
int puntajeTotal = 0;
int puntaje;


    for (int i = 1; i <= 3; ++i) {
        lanDados(dados);
         puntaje = calPunt(dados);

        cout << "|LANZAMIENTO N°|\n" << i << endl;
        imprDados(dados);
        cout << "|Puntaje del lanzamiento: " << puntaje << " puntos|\n";

        if (puntaje == -1) {
            cout << "|¡ESCALERA! ¡GANASTE LA PARTIDA!|\n";
            puntajeTotal = 100; // Ganar el juego
            break;
        } else if (puntaje == 0) {
            cout << "|Sexteto de 6! El puntaje total se resetea a 0.|\n";
            puntajeTotal = 0;
            break;
        }
    }

    return 0;
}
